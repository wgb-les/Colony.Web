(function () { var g, a = this, b = a.Backbone, c = [], d = c.push, e = c.slice, f = c.splice; g = "undefined" != typeof exports ? exports : a.Backbone = {}, g.VERSION = "1.0.0"; var h = a._; h || "undefined" == typeof require || (h = require("underscore")), g.$ = a.jQuery || a.Zepto || a.ender || a.$, g.noConflict = function () { return a.Backbone = b, this }, g.emulateHTTP = !1, g.emulateJSON = !1; var i = g.Events = { on: function (a, b, c) { if (!k(this, "on", a, [b, c]) || !b) return this; this._events || (this._events = {}); var d = this._events[a] || (this._events[a] = []); return d.push({ callback: b, context: c, ctx: c || this }), this }, once: function (a, b, c) { if (!k(this, "once", a, [b, c]) || !b) return this; var d = this, e = h.once(function () { d.off(a, e), b.apply(this, arguments) }); return e._callback = b, this.on(a, e, c) }, off: function (a, b, c) { var d, e, f, g, i, j, l, m; if (!this._events || !k(this, "off", a, [b, c])) return this; if (!a && !b && !c) return this._events = {}, this; for (g = a ? [a] : h.keys(this._events), i = 0, j = g.length; i < j; i++) if (a = g[i], f = this._events[a]) { if (this._events[a] = d = [], b || c) for (l = 0, m = f.length; l < m; l++) e = f[l], (b && b !== e.callback && b !== e.callback._callback || c && c !== e.context) && d.push(e); d.length || delete this._events[a] } return this }, trigger: function (a) { if (!this._events) return this; var b = e.call(arguments, 1); if (!k(this, "trigger", a, b)) return this; var c = this._events[a], d = this._events.all; return c && l(c, b), d && l(d, arguments), this }, stopListening: function (a, b, c) { var d = this._listeners; if (!d) return this; var e = !b && !c; "object" == typeof b && (c = this), a && ((d = {})[a._listenerId] = a); for (var f in d) d[f].off(b, c, this), e && delete this._listeners[f]; return this } }, j = /\s+/, k = function (a, b, c, d) { if (!c) return !0; if ("object" == typeof c) { for (var e in c) a[b].apply(a, [e, c[e]].concat(d)); return !1 } if (j.test(c)) { for (var f = c.split(j), g = 0, h = f.length; g < h; g++) a[b].apply(a, [f[g]].concat(d)); return !1 } return !0 }, l = function (a, b) { var c, d = -1, e = a.length, f = b[0], g = b[1], h = b[2]; switch (b.length) { case 0: for (; ++d < e;) (c = a[d]).callback.call(c.ctx); return; case 1: for (; ++d < e;) (c = a[d]).callback.call(c.ctx, f); return; case 2: for (; ++d < e;) (c = a[d]).callback.call(c.ctx, f, g); return; case 3: for (; ++d < e;) (c = a[d]).callback.call(c.ctx, f, g, h); return; default: for (; ++d < e;) (c = a[d]).callback.apply(c.ctx, b) } }, m = { listenTo: "on", listenToOnce: "once" }; h.each(m, function (a, b) { i[b] = function (b, c, d) { var e = this._listeners || (this._listeners = {}), f = b._listenerId || (b._listenerId = h.uniqueId("l")); return e[f] = b, "object" == typeof c && (d = this), b[a](c, d, this), this } }), i.bind = i.on, i.unbind = i.off, h.extend(g, i); var n = g.Model = function (a, b) { var c, d = a || {}; b || (b = {}), this.cid = h.uniqueId("c"), this.attributes = {}, h.extend(this, h.pick(b, o)), b.parse && (d = this.parse(d, b) || {}), (c = h.result(this, "defaults")) && (d = h.defaults({}, d, c)), this.set(d, b), this.changed = {}, this.initialize.apply(this, arguments) }, o = ["url", "urlRoot", "collection"]; h.extend(n.prototype, i, { changed: null, validationError: null, idAttribute: "id", initialize: function () { }, toJSON: function (a) { return h.clone(this.attributes) }, sync: function () { return g.sync.apply(this, arguments) }, get: function (a) { return this.attributes[a] }, escape: function (a) { return h.escape(this.get(a)) }, has: function (a) { return null != this.get(a) }, set: function (a, b, c) { var d, e, f, g, i, j, k, l; if (null == a) return this; if ("object" == typeof a ? (e = a, c = b) : (e = {})[a] = b, c || (c = {}), !this._validate(e, c)) return !1; f = c.unset, i = c.silent, g = [], j = this._changing, this._changing = !0, j || (this._previousAttributes = h.clone(this.attributes), this.changed = {}), l = this.attributes, k = this._previousAttributes, this.idAttribute in e && (this.id = e[this.idAttribute]); for (d in e) b = e[d], h.isEqual(l[d], b) || g.push(d), h.isEqual(k[d], b) ? delete this.changed[d] : this.changed[d] = b, f ? delete l[d] : l[d] = b; if (!i) { g.length && (this._pending = !0); for (var m = 0, n = g.length; m < n; m++) this.trigger("change:" + g[m], this, l[g[m]], c) } if (j) return this; if (!i) for (; this._pending;) this._pending = !1, this.trigger("change", this, c); return this._pending = !1, this._changing = !1, this }, unset: function (a, b) { return this.set(a, void 0, h.extend({}, b, { unset: !0 })) }, clear: function (a) { var b = {}; for (var c in this.attributes) b[c] = void 0; return this.set(b, h.extend({}, a, { unset: !0 })) }, hasChanged: function (a) { return null == a ? !h.isEmpty(this.changed) : h.has(this.changed, a) }, changedAttributes: function (a) { if (!a) return !!this.hasChanged() && h.clone(this.changed); var b, c = !1, d = this._changing ? this._previousAttributes : this.attributes; for (var e in a) h.isEqual(d[e], b = a[e]) || ((c || (c = {}))[e] = b); return c }, previous: function (a) { return null != a && this._previousAttributes ? this._previousAttributes[a] : null }, previousAttributes: function () { return h.clone(this._previousAttributes) }, fetch: function (a) { a = a ? h.clone(a) : {}, void 0 === a.parse && (a.parse = !0); var b = this, c = a.success; return a.success = function (d) { return !!b.set(b.parse(d, a), a) && (c && c(b, d, a), void b.trigger("sync", b, d, a)) }, L(this, a), this.sync("read", this, a) }, save: function (a, b, c) { var d, e, f, g = this.attributes; if (null == a || "object" == typeof a ? (d = a, c = b) : (d = {})[a] = b, d && (!c || !c.wait) && !this.set(d, c)) return !1; if (c = h.extend({ validate: !0 }, c), !this._validate(d, c)) return !1; d && c.wait && (this.attributes = h.extend({}, g, d)), void 0 === c.parse && (c.parse = !0); var i = this, j = c.success; return c.success = function (a) { i.attributes = g; var b = i.parse(a, c); return c.wait && (b = h.extend(d || {}, b)), !(h.isObject(b) && !i.set(b, c)) && (j && j(i, a, c), void i.trigger("sync", i, a, c)) }, L(this, c), e = this.isNew() ? "create" : c.patch ? "patch" : "update", "patch" === e && (c.attrs = d), f = this.sync(e, this, c), d && c.wait && (this.attributes = g), f }, destroy: function (a) { a = a ? h.clone(a) : {}; var b = this, c = a.success, d = function () { b.trigger("destroy", b, b.collection, a) }; if (a.success = function (e) { (a.wait || b.isNew()) && d(), c && c(b, e, a), b.isNew() || b.trigger("sync", b, e, a) }, this.isNew()) return a.success(), !1; L(this, a); var e = this.sync("delete", this, a); return a.wait || d(), e }, url: function () { var a = h.result(this, "urlRoot") || h.result(this.collection, "url") || K(); return this.isNew() ? a : a + ("/" === a.charAt(a.length - 1) ? "" : "/") + encodeURIComponent(this.id) }, parse: function (a, b) { return a }, clone: function () { return new this.constructor(this.attributes) }, isNew: function () { return null == this.id }, isValid: function (a) { return this._validate({}, h.extend(a || {}, { validate: !0 })) }, _validate: function (a, b) { if (!b.validate || !this.validate) return !0; a = h.extend({}, this.attributes, a); var c = this.validationError = this.validate(a, b) || null; return !c || (this.trigger("invalid", this, c, h.extend(b || {}, { validationError: c })), !1) } }); var p = ["keys", "values", "pairs", "invert", "pick", "omit"]; h.each(p, function (a) { n.prototype[a] = function () { var b = e.call(arguments); return b.unshift(this.attributes), h[a].apply(h, b) } }); var q = g.Collection = function (a, b) { b || (b = {}), b.url && (this.url = b.url), b.model && (this.model = b.model), void 0 !== b.comparator && (this.comparator = b.comparator), this._reset(), this.initialize.apply(this, arguments), a && this.reset(a, h.extend({ silent: !0 }, b)) }, r = { add: !0, remove: !0, merge: !0 }, s = { add: !0, merge: !1, remove: !1 }; h.extend(q.prototype, i, { model: n, initialize: function () { }, toJSON: function (a) { return this.map(function (b) { return b.toJSON(a) }) }, sync: function () { return g.sync.apply(this, arguments) }, add: function (a, b) { return this.set(a, h.defaults(b || {}, s)) }, remove: function (a, b) { a = h.isArray(a) ? a.slice() : [a], b || (b = {}); var c, d, e, f; for (c = 0, d = a.length; c < d; c++) f = this.get(a[c]), f && (delete this._byId[f.id], delete this._byId[f.cid], e = this.indexOf(f), this.models.splice(e, 1), this.length--, b.silent || (b.index = e, f.trigger("remove", f, this, b)), this._removeReference(f)); return this }, set: function (a, b) { b = h.defaults(b || {}, r), b.parse && (a = this.parse(a, b)), h.isArray(a) || (a = a ? [a] : []); var c, e, g, j, k, l = b.at, m = this.comparator && null == l && b.sort !== !1, n = h.isString(this.comparator) ? this.comparator : null, o = [], p = [], q = {}; for (c = 0, e = a.length; c < e; c++) (g = this._prepareModel(a[c], b)) && ((j = this.get(g)) ? (b.remove && (q[j.cid] = !0), b.merge && (j.set(g.attributes, b), m && !k && j.hasChanged(n) && (k = !0))) : b.add && (o.push(g), g.on("all", this._onModelEvent, this), this._byId[g.cid] = g, null != g.id && (this._byId[g.id] = g))); if (b.remove) { for (c = 0, e = this.length; c < e; ++c) q[(g = this.models[c]).cid] || p.push(g); p.length && this.remove(p, b) } if (o.length && (m && (k = !0), this.length += o.length, null != l ? f.apply(this.models, [l, 0].concat(o)) : d.apply(this.models, o)), k && this.sort({ silent: !0 }), b.silent) return this; for (c = 0, e = o.length; c < e; c++) (g = o[c]).trigger("add", g, this, b); return k && this.trigger("sort", this, b), this }, reset: function (a, b) { b || (b = {}); for (var c = 0, d = this.models.length; c < d; c++) this._removeReference(this.models[c]); return b.previousModels = this.models, this._reset(), this.add(a, h.extend({ silent: !0 }, b)), b.silent || this.trigger("reset", this, b), this }, push: function (a, b) { return a = this._prepareModel(a, b), this.add(a, h.extend({ at: this.length }, b)), a }, pop: function (a) { var b = this.at(this.length - 1); return this.remove(b, a), b }, unshift: function (a, b) { return a = this._prepareModel(a, b), this.add(a, h.extend({ at: 0 }, b)), a }, shift: function (a) { var b = this.at(0); return this.remove(b, a), b }, slice: function (a, b) { return this.models.slice(a, b) }, get: function (a) { if (null != a) return this._byId[null != a.id ? a.id : a.cid || a] }, at: function (a) { return this.models[a] }, where: function (a, b) { return h.isEmpty(a) ? b ? void 0 : [] : this[b ? "find" : "filter"](function (b) { for (var c in a) if (a[c] !== b.get(c)) return !1; return !0 }) }, findWhere: function (a) { return this.where(a, !0) }, sort: function (a) { if (!this.comparator) throw new Error("Cannot sort a set without a comparator"); return a || (a = {}), h.isString(this.comparator) || 1 === this.comparator.length ? this.models = this.sortBy(this.comparator, this) : this.models.sort(h.bind(this.comparator, this)), a.silent || this.trigger("sort", this, a), this }, sortedIndex: function (a, b, c) { b || (b = this.comparator); var d = h.isFunction(b) ? b : function (a) { return a.get(b) }; return h.sortedIndex(this.models, a, d, c) }, pluck: function (a) { return h.invoke(this.models, "get", a) }, fetch: function (a) { a = a ? h.clone(a) : {}, void 0 === a.parse && (a.parse = !0); var b = a.success, c = this; return a.success = function (d) { var e = a.reset ? "reset" : "set"; c[e](d, a), b && b(c, d, a), c.trigger("sync", c, d, a) }, L(this, a), this.sync("read", this, a) }, create: function (a, b) { if (b = b ? h.clone(b) : {}, !(a = this._prepareModel(a, b))) return !1; b.wait || this.add(a, b); var c = this, d = b.success; return b.success = function (e) { b.wait && c.add(a, b), d && d(a, e, b) }, a.save(null, b), a }, parse: function (a, b) { return a }, clone: function () { return new this.constructor(this.models) }, _reset: function () { this.length = 0, this.models = [], this._byId = {} }, _prepareModel: function (a, b) { if (a instanceof n) return a.collection || (a.collection = this), a; b || (b = {}), b.collection = this; var c = new this.model(a, b); return c._validate(a, b) ? c : (this.trigger("invalid", this, a, b), !1) }, _removeReference: function (a) { this === a.collection && delete a.collection, a.off("all", this._onModelEvent, this) }, _onModelEvent: function (a, b, c, d) { ("add" !== a && "remove" !== a || c === this) && ("destroy" === a && this.remove(b, d), b && a === "change:" + b.idAttribute && (delete this._byId[b.previous(b.idAttribute)], null != b.id && (this._byId[b.id] = b)), this.trigger.apply(this, arguments)) } }); var t = ["forEach", "each", "map", "collect", "reduce", "foldl", "inject", "reduceRight", "foldr", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "max", "min", "toArray", "size", "first", "head", "take", "initial", "rest", "tail", "drop", "last", "without", "indexOf", "shuffle", "lastIndexOf", "isEmpty", "chain"]; h.each(t, function (a) { q.prototype[a] = function () { var b = e.call(arguments); return b.unshift(this.models), h[a].apply(h, b) } }); var u = ["groupBy", "countBy", "sortBy"]; h.each(u, function (a) { q.prototype[a] = function (b, c) { var d = h.isFunction(b) ? b : function (a) { return a.get(b) }; return h[a](this.models, d, c) } }); var v = g.View = function (a) { this.cid = h.uniqueId("view"), this._configure(a || {}), this._ensureElement(), this.initialize.apply(this, arguments), this.delegateEvents() }, w = /^(\S+)\s*(.*)$/, x = ["model", "collection", "el", "id", "attributes", "className", "tagName", "events"]; h.extend(v.prototype, i, { tagName: "div", $: function (a) { return this.$el.find(a) }, initialize: function () { }, render: function () { return this }, remove: function () { return this.$el.remove(), this.stopListening(), this }, setElement: function (a, b) { return this.$el && this.undelegateEvents(), this.$el = a instanceof g.$ ? a : g.$(a), this.el = this.$el[0], b !== !1 && this.delegateEvents(), this }, delegateEvents: function (a) { if (!a && !(a = h.result(this, "events"))) return this; this.undelegateEvents(); for (var b in a) { var c = a[b]; if (h.isFunction(c) || (c = this[a[b]]), c) { var d = b.match(w), e = d[1], f = d[2]; c = h.bind(c, this), e += ".delegateEvents" + this.cid, "" === f ? this.$el.on(e, c) : this.$el.on(e, f, c) } } return this }, undelegateEvents: function () { return this.$el.off(".delegateEvents" + this.cid), this }, _configure: function (a) { this.options && (a = h.extend({}, h.result(this, "options"), a)), h.extend(this, h.pick(a, x)), this.options = a }, _ensureElement: function () { if (this.el) this.setElement(h.result(this, "el"), !1); else { var a = h.extend({}, h.result(this, "attributes")); this.id && (a.id = h.result(this, "id")), this.className && (a.class = h.result(this, "className")); var b = g.$("<" + h.result(this, "tagName") + ">").attr(a); this.setElement(b, !1) } } }), g.sync = function (a, b, c) { var d = y[a]; h.defaults(c || (c = {}), { emulateHTTP: g.emulateHTTP, emulateJSON: g.emulateJSON }); var e = { type: d, dataType: "json" }; if (c.url || (e.url = h.result(b, "url") || K()), null != c.data || !b || "create" !== a && "update" !== a && "patch" !== a || (e.contentType = "application/json", e.data = JSON.stringify(c.attrs || b.toJSON(c))), c.emulateJSON && (e.contentType = "application/x-www-form-urlencoded", e.data = e.data ? { model: e.data } : {}), c.emulateHTTP && ("PUT" === d || "DELETE" === d || "PATCH" === d)) { e.type = "POST", c.emulateJSON && (e.data._method = d); var f = c.beforeSend; c.beforeSend = function (a) { if (a.setRequestHeader("X-HTTP-Method-Override", d), f) return f.apply(this, arguments) } } "GET" === e.type || c.emulateJSON || (e.processData = !1), "PATCH" !== e.type || !window.ActiveXObject || window.external && window.external.msActiveXFilteringEnabled || (e.xhr = function () { return new ActiveXObject("Microsoft.XMLHTTP") }); var i = c.xhr = g.ajax(h.extend(e, c)); return b.trigger("request", b, i, c), i }; var y = { create: "POST", update: "PUT", patch: "PATCH", delete: "DELETE", read: "GET" }; g.ajax = function () { return g.$.ajax.apply(g.$, arguments) }; var z = g.Router = function (a) { a || (a = {}), a.routes && (this.routes = a.routes), this._bindRoutes(), this.initialize.apply(this, arguments) }, A = /\((.*?)\)/g, B = /(\(\?)?:\w+/g, C = /\*\w+/g, D = /[\-{}\[\]+?.,\\\^$|#\s]/g; h.extend(z.prototype, i, { initialize: function () { }, route: function (a, b, c) { h.isRegExp(a) || (a = this._routeToRegExp(a)), h.isFunction(b) && (c = b, b = ""), c || (c = this[b]); var d = this; return g.history.route(a, function (e) { var f = d._extractParameters(a, e); c && c.apply(d, f), d.trigger.apply(d, ["route:" + b].concat(f)), d.trigger("route", b, f), g.history.trigger("route", d, b, f) }), this }, navigate: function (a, b) { return g.history.navigate(a, b), this }, _bindRoutes: function () { if (this.routes) { this.routes = h.result(this, "routes"); for (var a, b = h.keys(this.routes) ; null != (a = b.pop()) ;) this.route(a, this.routes[a]) } }, _routeToRegExp: function (a) { return a = a.replace(D, "\\$&").replace(A, "(?:$1)?").replace(B, function (a, b) { return b ? a : "([^/]+)" }).replace(C, "(.*?)"), new RegExp("^" + a + "$") }, _extractParameters: function (a, b) { var c = a.exec(b).slice(1); return h.map(c, function (a) { return a ? decodeURIComponent(a) : null }) } }); var E = g.History = function () { this.handlers = [], h.bindAll(this, "checkUrl"), "undefined" != typeof window && (this.location = window.location, this.history = window.history) }, F = /^[#\/]|\s+$/g, G = /^\/+|\/+$/g, H = /msie [\w.]+/, I = /\/$/; E.started = !1, h.extend(E.prototype, i, { interval: 50, getHash: function (a) { var b = (a || this).location.href.match(/#(.*)$/); return b ? b[1] : "" }, getFragment: function (a, b) { if (null == a) if (this._hasPushState || !this._wantsHashChange || b) { a = this.location.pathname; var c = this.root.replace(I, ""); a.indexOf(c) || (a = a.substr(c.length)) } else a = this.getHash(); return a.replace(F, "") }, start: function (a) { if (E.started) throw new Error("Backbone.history has already been started"); E.started = !0, this.options = h.extend({}, { root: "/" }, this.options, a), this.root = this.options.root, this._wantsHashChange = this.options.hashChange !== !1, this._wantsPushState = !!this.options.pushState, this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState); var b = this.getFragment(), c = document.documentMode, d = H.exec(navigator.userAgent.toLowerCase()) && (!c || c <= 7); this.root = ("/" + this.root + "/").replace(G, "/"), d && this._wantsHashChange && (this.iframe = g.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo("body")[0].contentWindow, this.navigate(b)), this._hasPushState ? g.$(window).on("popstate", this.checkUrl) : this._wantsHashChange && "onhashchange" in window && !d ? g.$(window).on("hashchange", this.checkUrl) : this._wantsHashChange && (this._checkUrlInterval = setInterval(this.checkUrl, this.interval)), this.fragment = b; var e = this.location, f = e.pathname.replace(/[^\/]$/, "$&/") === this.root; return this._wantsHashChange && this._wantsPushState && !this._hasPushState && !f ? (this.fragment = this.getFragment(null, !0), this.location.replace(this.root + this.location.search + "#" + this.fragment), !0) : (this._wantsPushState && this._hasPushState && f && e.hash && (this.fragment = this.getHash().replace(F, ""), this.history.replaceState({}, document.title, this.root + this.fragment + e.search)), this.options.silent ? void 0 : this.loadUrl()) }, stop: function () { g.$(window).off("popstate", this.checkUrl).off("hashchange", this.checkUrl), clearInterval(this._checkUrlInterval), E.started = !1 }, route: function (a, b) { this.handlers.unshift({ route: a, callback: b }) }, checkUrl: function (a) { var b = this.getFragment(); return b === this.fragment && this.iframe && (b = this.getFragment(this.getHash(this.iframe))), b !== this.fragment && (this.iframe && this.navigate(b), void (this.loadUrl() || this.loadUrl(this.getHash()))) }, loadUrl: function (a) { var b = this.fragment = this.getFragment(a), c = h.any(this.handlers, function (a) { if (a.route.test(b)) return a.callback(b), !0 }); return c }, navigate: function (a, b) { if (!E.started) return !1; if (b && b !== !0 || (b = { trigger: b }), a = this.getFragment(a || ""), this.fragment !== a) { this.fragment = a; var c = this.root + a; if (this._hasPushState) this.history[b.replace ? "replaceState" : "pushState"]({}, document.title, c); else { if (!this._wantsHashChange) return this.location.assign(c); this._updateHash(this.location, a, b.replace), this.iframe && a !== this.getFragment(this.getHash(this.iframe)) && (b.replace || this.iframe.document.open().close(), this._updateHash(this.iframe.location, a, b.replace)) } b.trigger && this.loadUrl(a) } }, _updateHash: function (a, b, c) { if (c) { var d = a.href.replace(/(javascript:|#).*$/, ""); a.replace(d + "#" + b) } else a.hash = "#" + b } }), g.history = new E; var J = function (a, b) { var d, c = this; d = a && h.has(a, "constructor") ? a.constructor : function () { return c.apply(this, arguments) }, h.extend(d, c, b); var e = function () { this.constructor = d }; return e.prototype = c.prototype, d.prototype = new e, a && h.extend(d.prototype, a), d.__super__ = c.prototype, d }; n.extend = q.extend = z.extend = v.extend = E.extend = J; var K = function () { throw new Error('A "url" property or function must be specified') }, L = function (a, b) { var c = b.error; b.error = function (d) { c && c(a, d, b), a.trigger("error", a, d, b) } } }).call(this), Backbone.ChildViewContainer = function (a, b) { var c = function (a) { this._views = {}, this._indexByModel = {}, this._indexByCollection = {}, this._indexByCustom = {}, this._updateLength(), this._addInitialViews(a) }; b.extend(c.prototype, { add: function (a, b) { var c = a.cid; this._views[c] = a, a.model && (this._indexByModel[a.model.cid] = c), a.collection && (this._indexByCollection[a.collection.cid] = c), b && (this._indexByCustom[b] = c), this._updateLength() }, findByModel: function (a) { var b = this._indexByModel[a.cid]; return this.findByCid(b) }, findByCollection: function (a) { var b = this._indexByCollection[a.cid]; return this.findByCid(b) }, findByCustom: function (a) { var b = this._indexByCustom[a]; return this.findByCid(b) }, findByIndex: function (a) { return b.values(this._views)[a] }, findByCid: function (a) { return this._views[a] }, remove: function (a) { var b = a.cid; a.model && delete this._indexByModel[a.model.cid], a.collection && delete this._indexByCollection[a.collection.cid]; var c; for (var d in this._indexByCustom) if (this._indexByCustom.hasOwnProperty(d) && this._indexByCustom[d] === b) { c = d; break } c && delete this._indexByCustom[c], delete this._views[b], this._updateLength() }, call: function (a, b) { b = Array.prototype.slice.call(arguments, 1), this.apply(a, b) }, apply: function (a, c) { c = c || [], b.each(this._views, function (d, e) { b.isFunction(d[a]) && d[a].apply(d, c) }) }, _updateLength: function () { this.length = b.size(this._views) }, _addInitialViews: function (a) { if (a) { var b, c, d = a.length; for (c = 0; c < d; c++) b = a[c], this.add(b) } } }); var d = ["forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck"]; return b.each(d, function (a) { c.prototype[a] = function () { var c = b.values(this._views), d = [c].concat(b.toArray(arguments)); return b[a].apply(b, d) } }), c }(Backbone, _), Backbone.Wreqr = function (a, b, c) { "use strict"; var d = {}; return d.Handlers = function (a, b) { var c = function (a) { this.options = a, this._wreqrHandlers = {}, b.isFunction(this.initialize) && this.initialize(a) }; return c.extend = a.Model.extend, b.extend(c.prototype, a.Events, { setHandlers: function (a) { b.each(a, function (a, c) { var d = null; b.isObject(a) && !b.isFunction(a) && (d = a.context, a = a.callback), this.setHandler(c, a, d) }, this) }, setHandler: function (a, b, c) { var d = { callback: b, context: c }; this._wreqrHandlers[a] = d, this.trigger("handler:add", a, b, c) }, hasHandler: function (a) { return !!this._wreqrHandlers[a] }, getHandler: function (a) { var b = this._wreqrHandlers[a]; if (!b) throw new Error("Handler not found for '" + a + "'"); return function () { var a = Array.prototype.slice.apply(arguments); return b.callback.apply(b.context, a) } }, removeHandler: function (a) { delete this._wreqrHandlers[a] }, removeAllHandlers: function () { this._wreqrHandlers = {} } }), c }(a, c), d.CommandStorage = function () { var b = function (a) { this.options = a, this._commands = {}, c.isFunction(this.initialize) && this.initialize(a) }; return c.extend(b.prototype, a.Events, { getCommands: function (a) { var b = this._commands[a]; return b || (b = { command: a, instances: [] }, this._commands[a] = b), b }, addCommand: function (a, b) { var c = this.getCommands(a); c.instances.push(b) }, clearCommands: function (a) { var b = this.getCommands(a); b.instances = [] } }), b }(), d.Commands = function (a) { return a.Handlers.extend({ storageType: a.CommandStorage, constructor: function (b) { this.options = b || {}, this._initializeStorage(this.options), this.on("handler:add", this._executeCommands, this); var c = Array.prototype.slice.call(arguments); a.Handlers.prototype.constructor.apply(this, c) }, execute: function (a, b) { a = arguments[0], b = Array.prototype.slice.call(arguments, 1), this.hasHandler(a) ? this.getHandler(a).apply(this, b) : this.storage.addCommand(a, b) }, _executeCommands: function (a, b, d) { var e = this.storage.getCommands(a); c.each(e.instances, function (a) { b.apply(d, a) }), this.storage.clearCommands(a) }, _initializeStorage: function (a) { var b, d = a.storageType || this.storageType; b = c.isFunction(d) ? new d : d, this.storage = b } }) }(d), d.RequestResponse = function (a) { return a.Handlers.extend({ request: function () { var a = arguments[0], b = Array.prototype.slice.call(arguments, 1); return this.getHandler(a).apply(this, b) } }) }(d), d.EventAggregator = function (a, b) { var c = function () { }; return c.extend = a.Model.extend, b.extend(c.prototype, a.Events), c }(a, c), d }(Backbone, Backbone.Marionette, _); var Marionette = function (a, b, c) {
    "use strict"; function f(a) { return e.call(a) } function g(a, b) { var c = new Error(a); throw c.name = b || "Error", c } var d = {}; b.Marionette = d, d.$ = b.$; var e = Array.prototype.slice; return d.extend = b.Model.extend, d.getOption = function (a, b) { if (a && b) { var c; return c = a.options && b in a.options && void 0 !== a.options[b] ? a.options[b] : a[b] } }, d.triggerMethod = function () { function b(a, b, c) { return c.toUpperCase() } var a = /(^|:)(\w)/gi, d = function (d) { var e = "on" + d.replace(a, b), f = this[e]; if (this.trigger.apply(this, arguments), c.isFunction(f)) return f.apply(this, c.tail(arguments)) }; return d }(), d.MonitorDOMRefresh = function () { function a(a) { a._isShown = !0, d(a) } function b(a) { a._isRendered = !0, d(a) } function d(a) { a._isShown && a._isRendered && c.isFunction(a.triggerMethod) && a.triggerMethod("dom:refresh") } return function (c) { c.listenTo(c, "show", function () { a(c) }), c.listenTo(c, "render", function () { b(c) }) } }(), function (a) { function b(a, b, d, e) { var f = e.split(/\s+/); c.each(f, function (c) { var e = a[c]; e || g("Method '" + c + "' was configured as an event handler, but does not exist."), a.listenTo(b, d, e, a) }) } function d(a, b, c, d) { a.listenTo(b, c, d, a) } function e(a, b, d, e) { var f = e.split(/\s+/); c.each(f, function (c) { var e = a[c]; a.stopListening(b, d, e, a) }) } function f(a, b, c, d) { a.stopListening(b, c, d, a) } function h(a, b, d, e, f) { b && d && (c.isFunction(d) && (d = d.call(a)), c.each(d, function (d, g) { c.isFunction(d) ? e(a, b, g, d) : f(a, b, g, d) })) } a.bindEntityEvents = function (a, c, e) { h(a, c, e, d, b) }, a.unbindEntityEvents = function (a, b, c) { h(a, b, c, f, e) } }(d), d.Callbacks = function () { this._deferred = d.$.Deferred(), this._callbacks = [] }, c.extend(d.Callbacks.prototype, { add: function (a, b) { this._callbacks.push({ cb: a, ctx: b }), this._deferred.done(function (c, d) { b && (c = b), a.call(c, d) }) }, run: function (a, b) { this._deferred.resolve(b, a) }, reset: function () { var a = this._callbacks; this._deferred = d.$.Deferred(), this._callbacks = [], c.each(a, function (a) { this.add(a.cb, a.ctx) }, this) } }), d.Controller = function (a) { this.triggerMethod = d.triggerMethod, this.options = a || {}, c.isFunction(this.initialize) && this.initialize(this.options) }, d.Controller.extend = d.extend, c.extend(d.Controller.prototype, b.Events, { close: function () { this.stopListening(), this.triggerMethod("close"), this.unbind() } }), d.Region = function (a) { if (this.options = a || {}, this.el = d.getOption(this, "el"), !this.el) { var b = new Error("An 'el' must be specified for a region."); throw b.name = "NoElError", b } if (this.initialize) { var c = Array.prototype.slice.apply(arguments); this.initialize.apply(this, c) } }, c.extend(d.Region, { buildRegion: function (a, b) { var d = "string" == typeof a, e = "string" == typeof a.selector, f = "undefined" == typeof a.regionType, g = "function" == typeof a; if (!g && !d && !e) throw new Error("Region must be specified as a Region type, a selector string or an object with selector property"); var h, i; d && (h = a), a.selector && (h = a.selector), g && (i = a), !g && f && (i = b), a.regionType && (i = a.regionType); var j = new i({ el: h }); return a.parentEl && (j.getEl = function (b) { var d = a.parentEl; return c.isFunction(d) && (d = d()), d.find(b) }), j } }), c.extend(d.Region.prototype, b.Events, { show: function (a) { this.ensureEl(); var b = a.isClosed || c.isUndefined(a.$el), e = a !== this.currentView; e && this.close(), a.render(), (e || b) && this.open(a), this.currentView = a, d.triggerMethod.call(this, "show", a), d.triggerMethod.call(a, "show") }, ensureEl: function () { this.$el && 0 !== this.$el.length || (this.$el = this.getEl(this.el)) }, getEl: function (a) { return d.$(a) }, open: function (a) { this.$el.empty().append(a.el) }, close: function () { var a = this.currentView; a && !a.isClosed && (a.close ? a.close() : a.remove && a.remove(), d.triggerMethod.call(this, "close"), delete this.currentView) }, attachView: function (a) { this.currentView = a }, reset: function () { this.close(), delete this.$el } }), d.Region.extend = d.extend, d.RegionManager = function (a) { var b = a.Controller.extend({ constructor: function (b) { this._regions = {}, a.Controller.prototype.constructor.call(this, b) }, addRegions: function (a, b) { var d = {}; return c.each(a, function (a, e) { "string" == typeof a && (a = { selector: a }), a.selector && (a = c.defaults({}, a, b)); var f = this.addRegion(e, a); d[e] = f }, this), d }, addRegion: function (b, d) { var e, f = c.isObject(d), g = c.isString(d), h = !!d.selector; return e = g || f && h ? a.Region.buildRegion(d, a.Region) : c.isFunction(d) ? a.Region.buildRegion(d, a.Region) : d, this._store(b, e), this.triggerMethod("region:add", b, e), e }, get: function (a) { return this._regions[a] }, removeRegion: function (a) { var b = this._regions[a]; this._remove(a, b) }, removeRegions: function () { c.each(this._regions, function (a, b) { this._remove(b, a) }, this) }, closeRegions: function () { c.each(this._regions, function (a, b) { a.close() }, this) }, close: function () { this.removeRegions(); var b = Array.prototype.slice.call(arguments); a.Controller.prototype.close.apply(this, b) }, _store: function (a, b) { this._regions[a] = b, this._setLength() }, _remove: function (a, b) { b.close(), delete this._regions[a], this._setLength(), this.triggerMethod("region:remove", a, b) }, _setLength: function () { this.length = c.size(this._regions) } }), d = ["forEach", "each", "map", "find", "detect", "filter", "select", "reject", "every", "all", "some", "any", "include", "contains", "invoke", "toArray", "first", "initial", "rest", "last", "without", "isEmpty", "pluck"]; return c.each(d, function (a) { b.prototype[a] = function () { var b = c.values(this._regions), d = [b].concat(c.toArray(arguments)); return c[a].apply(c, d) } }), b }(d), d.TemplateCache = function (a) { this.templateId = a }, c.extend(d.TemplateCache, { templateCaches: {}, get: function (a) { var b = this.templateCaches[a]; return b || (b = new d.TemplateCache(a), this.templateCaches[a] = b), b.load() }, clear: function () { var a, b = f(arguments), c = b.length; if (c > 0) for (a = 0; a < c; a++) delete this.templateCaches[b[a]]; else this.templateCaches = {} } }), c.extend(d.TemplateCache.prototype, { load: function () { if (this.compiledTemplate) return this.compiledTemplate; var a = this.loadTemplate(this.templateId); return this.compiledTemplate = this.compileTemplate(a), this.compiledTemplate }, loadTemplate: function (a) { var b = d.$(a).html(); return b && 0 !== b.length || g("Could not find template: '" + a + "'", "NoTemplateError"), b }, compileTemplate: function (a) { return c.template(a) } }), d.Renderer = { render: function (a, b) { if (!a) { var c = new Error("Cannot render the template since it's false, null or undefined."); throw c.name = "TemplateNotFoundError", c } var e; return (e = "function" == typeof a ? a : d.TemplateCache.get(a))(b) } }, d.View = b.View.extend({ constructor: function () { c.bindAll(this, "render"); var a = Array.prototype.slice.apply(arguments); b.View.prototype.constructor.apply(this, a), d.MonitorDOMRefresh(this), this.listenTo(this, "show", this.onShowCalled, this) }, triggerMethod: d.triggerMethod, getTemplate: function () { return d.getOption(this, "template") }, mixinTemplateHelpers: function (a) { a = a || {}; var b = this.templateHelpers; return c.isFunction(b) && (b = b.call(this)), c.extend(a, b) }, configureTriggers: function () { if (this.triggers) { var a = {}, b = c.result(this, "triggers"); return c.each(b, function (b, c) { a[c] = function (a) { a && a.preventDefault && a.preventDefault(), a && a.stopPropagation && a.stopPropagation(); var c = { view: this, model: this.model, collection: this.collection }; this.triggerMethod(b, c) } }, this), a } }, delegateEvents: function (a) { this._delegateDOMEvents(a), d.bindEntityEvents(this, this.model, d.getOption(this, "modelEvents")), d.bindEntityEvents(this, this.collection, d.getOption(this, "collectionEvents")) }, _delegateDOMEvents: function (a) { a = a || this.events, c.isFunction(a) && (a = a.call(this)); var d = {}, e = this.configureTriggers(); c.extend(d, a, e), b.View.prototype.delegateEvents.call(this, d) }, undelegateEvents: function () { var a = Array.prototype.slice.call(arguments); b.View.prototype.undelegateEvents.apply(this, a), d.unbindEntityEvents(this, this.model, d.getOption(this, "modelEvents")), d.unbindEntityEvents(this, this.collection, d.getOption(this, "collectionEvents")) }, onShowCalled: function () { }, close: function () { if (!this.isClosed) { var a = this.triggerMethod("before:close"); a !== !1 && (this.isClosed = !0, this.triggerMethod("close"), this.unbindUIElements(), this.remove()) } }, bindUIElements: function () { if (this.ui) { this._uiBindings || (this._uiBindings = this.ui); var a = c.result(this, "_uiBindings"); this.ui = {}, c.each(c.keys(a), function (b) { var c = a[b]; this.ui[b] = this.$(c) }, this) } }, unbindUIElements: function () { this.ui && (c.each(this.ui, function (a, b) { delete this.ui[b] }, this), this.ui = this._uiBindings, delete this._uiBindings) } }), d.ItemView = d.View.extend({ serializeData: function () { var a = {}; return this.model ? a = this.model.toJSON() : this.collection && (a = { items: this.collection.toJSON() }), a }, render: function () { this.isClosed = !1, this.triggerMethod("before:render", this), this.triggerMethod("item:before:render", this); var a = this.serializeData(); a = this.mixinTemplateHelpers(a); var b = this.getTemplate(), c = d.Renderer.render(b, a); return this.$el.html(c), this.bindUIElements(), this.triggerMethod("render", this), this.triggerMethod("item:rendered", this), this }, close: function () { this.isClosed || (this.triggerMethod("item:before:close"), d.View.prototype.close.apply(this, f(arguments)), this.triggerMethod("item:closed")) } }), d.CollectionView = d.View.extend({
        itemViewEventPrefix: "itemview", constructor: function (a) { this._initChildViewStorage(), d.View.prototype.constructor.apply(this, f(arguments)), this._initialEvents() }, _initialEvents: function () {
            this.collection && (this.listenTo(this.collection, "add", this.addChildView, this), this.listenTo(this.collection, "remove", this.removeItemView, this),
            this.listenTo(this.collection, "reset", this.render, this))
        }, addChildView: function (a, b, c) { this.closeEmptyView(); var d = this.getItemView(a), e = this.collection.indexOf(a); this.addItemView(a, d, e) }, onShowCalled: function () { this.children.each(function (a) { d.triggerMethod.call(a, "show") }) }, triggerBeforeRender: function () { this.triggerMethod("before:render", this), this.triggerMethod("collection:before:render", this) }, triggerRendered: function () { this.triggerMethod("render", this), this.triggerMethod("collection:rendered", this) }, render: function () { return this.isClosed = !1, this.triggerBeforeRender(), this._renderChildren(), this.triggerRendered(), this }, _renderChildren: function () { this.closeEmptyView(), this.closeChildren(), this.collection && this.collection.length > 0 ? this.showCollection() : this.showEmptyView() }, showCollection: function () { var a; this.collection.each(function (b, c) { a = this.getItemView(b), this.addItemView(b, a, c) }, this) }, showEmptyView: function () { var a = d.getOption(this, "emptyView"); if (a && !this._showingEmptyView) { this._showingEmptyView = !0; var c = new b.Model; this.addItemView(c, a, 0) } }, closeEmptyView: function () { this._showingEmptyView && (this.closeChildren(), delete this._showingEmptyView) }, getItemView: function (a) { var b = d.getOption(this, "itemView"); return b || g("An `itemView` must be specified", "NoItemViewError"), b }, addItemView: function (a, b, e) { var f = d.getOption(this, "itemViewOptions"); c.isFunction(f) && (f = f.call(this, a, e)); var g = this.buildItemView(a, b, f); this.addChildViewEventForwarding(g), this.triggerMethod("before:item:added", g), this.children.add(g), this.renderItemView(g, e), this._isShown && d.triggerMethod.call(g, "show"), this.triggerMethod("after:item:added", g) }, addChildViewEventForwarding: function (a) { var b = d.getOption(this, "itemViewEventPrefix"); this.listenTo(a, "all", function () { var c = f(arguments); c[0] = b + ":" + c[0], c.splice(1, 0, a), d.triggerMethod.apply(this, c) }, this) }, renderItemView: function (a, b) { a.render(), this.appendHtml(this, a, b) }, buildItemView: function (a, b, d) { var e = c.extend({ model: a }, d); return new b(e) }, removeItemView: function (a) { var b = this.children.findByModel(a); this.removeChildView(b), this.checkEmpty() }, removeChildView: function (a) { a && (this.stopListening(a), a.close ? a.close() : a.remove && a.remove(), this.children.remove(a)), this.triggerMethod("item:removed", a) }, checkEmpty: function () { this.collection && 0 !== this.collection.length || this.showEmptyView() }, appendHtml: function (a, b, c) { a.$el.append(b.el) }, _initChildViewStorage: function () { this.children = new b.ChildViewContainer }, close: function () { this.isClosed || (this.triggerMethod("collection:before:close"), this.closeChildren(), this.triggerMethod("collection:closed"), d.View.prototype.close.apply(this, f(arguments))) }, closeChildren: function () { this.children.each(function (a) { this.removeChildView(a) }, this), this.checkEmpty() }
    }), d.CompositeView = d.CollectionView.extend({ _initialEvents: function () { this.collection && (this.listenTo(this.collection, "add", this.addChildView, this), this.listenTo(this.collection, "remove", this.removeItemView, this), this.listenTo(this.collection, "reset", this._renderChildren, this)) }, getItemView: function (a) { var b = d.getOption(this, "itemView") || this.constructor; return b || g("An `itemView` must be specified", "NoItemViewError"), b }, serializeData: function () { var a = {}; return this.model && (a = this.model.toJSON()), a }, render: function () { this.isRendered = !0, this.isClosed = !1, this.resetItemViewContainer(), this.triggerBeforeRender(); var a = this.renderModel(); return this.$el.html(a), this.bindUIElements(), this.triggerMethod("composite:model:rendered"), this._renderChildren(), this.triggerMethod("composite:rendered"), this.triggerRendered(), this }, _renderChildren: function () { this.isRendered && (d.CollectionView.prototype._renderChildren.call(this), this.triggerMethod("composite:collection:rendered")) }, renderModel: function () { var a = {}; a = this.serializeData(), a = this.mixinTemplateHelpers(a); var b = this.getTemplate(); return d.Renderer.render(b, a) }, appendHtml: function (a, b, c) { var d = this.getItemViewContainer(a); d.append(b.el) }, getItemViewContainer: function (a) { if ("$itemViewContainer" in a) return a.$itemViewContainer; var b; if (a.itemViewContainer) { var d = c.result(a, "itemViewContainer"); b = a.$(d), b.length <= 0 && g("The specified `itemViewContainer` was not found: " + a.itemViewContainer, "ItemViewContainerMissingError") } else b = a.$el; return a.$itemViewContainer = b, b }, resetItemViewContainer: function () { this.$itemViewContainer && delete this.$itemViewContainer } }), d.Layout = d.ItemView.extend({ regionType: d.Region, constructor: function (a) { a = a || {}, this._firstRender = !0, this._initializeRegions(a), d.ItemView.call(this, a) }, render: function () { this._firstRender ? this._firstRender = !1 : this.isClosed ? this._initializeRegions() : this._reInitializeRegions(); var a = Array.prototype.slice.apply(arguments), b = d.ItemView.prototype.render.apply(this, a); return b }, close: function () { if (!this.isClosed) { this.regionManager.close(); var a = Array.prototype.slice.apply(arguments); d.ItemView.prototype.close.apply(this, a) } }, addRegion: function (a, b) { var c = {}; return c[a] = b, this.addRegions(c)[a] }, addRegions: function (a) { return this.regions = c.extend(this.regions || {}, a), this._buildRegions(a) }, removeRegion: function (a) { return this.regionManager.removeRegion(a) }, _buildRegions: function (a) { var b = this, c = { parentEl: function () { return b.$el } }; return this.regionManager.addRegions(a, c) }, _initializeRegions: function (a) { var b; this._initRegionManager(), b = c.isFunction(this.regions) ? this.regions(a) : this.regions || {}, this.addRegions(b) }, _reInitializeRegions: function () { this.regionManager.closeRegions(), this.regionManager.each(function (a) { a.reset() }) }, _initRegionManager: function () { this.regionManager = new d.RegionManager, this.listenTo(this.regionManager, "region:add", function (a, b) { this[a] = b, this.trigger("region:add", a, b) }), this.listenTo(this.regionManager, "region:remove", function (a, b) { delete this[a], this.trigger("region:remove", a, b) }) } }), d.AppRouter = b.Router.extend({ constructor: function (a) { if (b.Router.prototype.constructor.apply(this, f(arguments)), this.options = a, this.appRoutes) { var c = d.getOption(this, "controller"); this.processAppRoutes(c, this.appRoutes) } }, processAppRoutes: function (a, b) { var d = c.keys(b).reverse(); c.each(d, function (d) { var e = b[d], f = a[e]; if (!f) throw new Error("Method '" + e + "' was not found on the controller"); this.route(d, e, c.bind(f, a)) }, this) } }), d.Application = function (a) { this._initRegionManager(), this._initCallbacks = new d.Callbacks, this.vent = new b.Wreqr.EventAggregator, this.commands = new b.Wreqr.Commands, this.reqres = new b.Wreqr.RequestResponse, this.submodules = {}, c.extend(this, a), this.triggerMethod = d.triggerMethod }, c.extend(d.Application.prototype, b.Events, { execute: function () { var a = Array.prototype.slice.apply(arguments); this.commands.execute.apply(this.commands, a) }, request: function () { var a = Array.prototype.slice.apply(arguments); return this.reqres.request.apply(this.reqres, a) }, addInitializer: function (a) { this._initCallbacks.add(a) }, start: function (a) { this.triggerMethod("initialize:before", a), this._initCallbacks.run(a, this), this.triggerMethod("initialize:after", a), this.triggerMethod("start", a) }, addRegions: function (a) { return this._regionManager.addRegions(a) }, removeRegion: function (a) { this._regionManager.removeRegion(a) }, module: function (a, b) { var c = f(arguments); return c.unshift(this), d.Module.create.apply(d.Module, c) }, _initRegionManager: function () { this._regionManager = new d.RegionManager, this.listenTo(this._regionManager, "region:add", function (a, b) { this[a] = b }), this.listenTo(this._regionManager, "region:remove", function (a, b) { delete this[a] }) } }), d.Application.extend = d.extend, d.Module = function (a, b) { this.moduleName = a, this.submodules = {}, this._setupInitializersAndFinalizers(), this.app = b, this.startWithParent = !0, this.triggerMethod = d.triggerMethod }, c.extend(d.Module.prototype, b.Events, { addInitializer: function (a) { this._initializerCallbacks.add(a) }, addFinalizer: function (a) { this._finalizerCallbacks.add(a) }, start: function (a) { this._isInitialized || (c.each(this.submodules, function (b) { b.startWithParent && b.start(a) }), this.triggerMethod("before:start", a), this._initializerCallbacks.run(a, this), this._isInitialized = !0, this.triggerMethod("start", a)) }, stop: function () { this._isInitialized && (this._isInitialized = !1, d.triggerMethod.call(this, "before:stop"), c.each(this.submodules, function (a) { a.stop() }), this._finalizerCallbacks.run(void 0, this), this._initializerCallbacks.reset(), this._finalizerCallbacks.reset(), d.triggerMethod.call(this, "stop")) }, addDefinition: function (a, b) { this._runModuleDefinition(a, b) }, _runModuleDefinition: function (a, e) { if (a) { var f = c.flatten([this, this.app, b, d, d.$, c, e]); a.apply(this, f) } }, _setupInitializersAndFinalizers: function () { this._initializerCallbacks = new d.Callbacks, this._finalizerCallbacks = new d.Callbacks } }), c.extend(d.Module, { create: function (a, b, d) { var e = a, g = f(arguments); g.splice(0, 3), b = b.split("."); var h = b.length, i = []; return i[h - 1] = d, c.each(b, function (b, c) { var d = e; e = this._getModule(d, b, a), this._addModuleDefinition(d, e, i[c], g) }, this), e }, _getModule: function (a, b, c, e, f) { var g = a[b]; return g || (g = new d.Module(b, c), a[b] = g, a.submodules[b] = g), g }, _addModuleDefinition: function (a, b, d, e) { var f, g; c.isFunction(d) ? (f = d, g = !0) : c.isObject(d) ? (f = d.define, g = d.startWithParent) : g = !0, f && b.addDefinition(f, e), b.startWithParent = b.startWithParent && g, b.startWithParent && !b.startWithParentIsConfigured && (b.startWithParentIsConfigured = !0, a.addInitializer(function (a) { b.startWithParent && b.start(a) })) } }), d
}(this, Backbone, _);