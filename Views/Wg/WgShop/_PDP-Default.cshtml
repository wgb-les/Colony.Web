@using WalkerGreenbank.Modules.PressMembers.Areas.B2BMembers
@model Colony.Commerce.Areas.Shops.Models.ProductDetailViewModel
@{
    var defaultImage = Model.Images.OrderBy(x => x.Order).FirstOrDefault();
    var defaultImageUrl = defaultImage != null ? @Url.ImageUrl(defaultImage.ImageAssetID, "ProductCatalogue", "ProductDetail", @"/_images/placeholders/article.jpg") : @"/_images/placeholders/article.jpg";

    var pinterestMediaUrl = new Uri(Request.Url, defaultImageUrl).AbsoluteUri;
    var isB2B = B2BCheckoutService.IsB2BUserLoggedIn(new HttpContextWrapper(HttpContext.Current));
    var isContract = B2BCheckoutService.IsContractUser(new HttpContextWrapper(HttpContext.Current));
    var isSampleable = Model.AllowSamples && int.Parse(Model.Attributes.GetValueOrNull("Sample Code") ?? "0") > 0;
    var currencyRegion = ViewBag.currencyRegionId.ToString();
    var PatternMatchDescription = Model.Attributes.ContainsKey("Pattern Match Description") ? Model.Attributes["Pattern Match Description"] : "";
    var DescriptiveColour = Model.Attributes.ContainsKey("Descriptive Colour") ? Model.Attributes["Descriptive Colour"] : "";
    var ProductGroup = Model.Attributes.ContainsKey("Product Group") ? Model.Attributes["Product Group"] : "";
    var brand = (Model.Attributes.GetValueOrNull("Brand") ?? "").Replace("&amp;", "&");
    var price = @Model.PriceWas.PriceInc.AsDecimal(0).ToString("#0.00");
    var currentPrice = Model.Price.PriceInc.AsDecimal(0).ToString("#0.00");
    decimal _ssp = @Model.PriceWas.PriceInc.AsDecimal(0);
    var width = (@Model.SelectedSku.Width ?? 0);
    var length = @Model.Attributes.GetValueOrNull("Ave Piece Size");
}
@if (isB2B)
{
    isSampleable = (int.Parse(Model.Attributes.GetValueOrNull("Sample Code") ?? "0") > 0);
}

<div style="display:none;">
    @if (Model.SelectedSku.UnitOfMeasurement.ToUpper() == "PL" || Model.SelectedSku.UnitOfMeasurement.ToUpper() == "R")
    {
        <div class="sl-calc-length">@length</div>
    }

    @if (Model.SelectedSku.UnitOfMeasurement.ToUpper() == "M")
    {
        <div class="sl-calc-length">1</div>
    }

    @if (Model.SelectedSku.UnitOfMeasurement.ToUpper() == "MT")
    {
        decimal temp;
        if (decimal.TryParse(Model.Attributes.GetValueOrNull("Vertical Pattern Repeat"), out temp))
        {
            if (temp > 0)
            {
                <div class="sl-calc-length">@((temp > 0 ? temp / 10 : temp).ToString("0.0"))</div>
            }
        }
    }
    <div class="sl-calc sl-calc-width">@width</div>
    <div class="sl-calc-price">@price</div>
</div>


<div id="sl-modal" class="modal">
    <!-- ---------- Share Popup ---------- -->
    @{Html.RenderAction("Share", "Share", new { area = "Sharing", MediaUrl = pinterestMediaUrl, Description = Model.Name });}

    <!-- ---------- Paint Chart/Caclulator Popups ---------- -->
    @if (Model.Attributes.GetValueOrNull("Product Group") == "Paint")
    {
        Html.RenderAction("OrderPaintCard", "Enquiries", new { area = "CustomShops", brand = @Model.Attributes.GetValueOrNull("Brand") });

        Html.RenderAction("PaintCalculatorModal", "WgCalculator");
    }

    <!-- ---------- Wallpaper Calculator Popup ---------- -->
    @if (Model.Attributes.GetValueOrNull("Product Group") == "Wallpaper")
    {
        Html.RenderAction("WallpaperCalculatorModal", "WgCalculator", new { rollPrice = _ssp, height = Model.Attributes.GetValueOrNull("Ave Piece Size"), width = (Model.SelectedSku.Width ?? 0) });
    }
</div>

<!-- ---------- Left Side (Imagery) ---------- -->
<div class="sl-container sl-split-55">

    <!-- ---------- Slider ---------- -->
    <div class="sl-product-slider">
        <div class="sl-items-container sl-slider sl-product-images">
            @if (Model.Images.Any())
            {
                var canvasId = 0;
                foreach (var image in Model.Images)
                {
                    canvasId++;

                    var imageUrl = Url.ImageUrl(image.ImageAssetID, "ProductCatalogue", "ProductDetail", @"/_images/placeholders/article.jpg");
                    var imageZoomUrl = Url.ImageUrl(image.ImageAssetID, "ProductCatalogue", "ProductDetailZoom", @"/_images/placeholders/article.jpg");
                    var imageThumbnailUrl = Url.ImageUrl(image.ImageAssetID, "ProductCatalogue", "ProductThumbnail", @"/_images/placeholders/article.jpg");
                    <div class="sl-slide sl-item">
                        <div class="sl-item-inner sl-zoom" data-value="productSlide">
                            <img id="zoom@(image.ImageAssetID)" class="sl-slide-image" src="@imageZoomUrl" data-productcode="@Model.SelectedSku.Code" data-productname="@Model.SelectedSku.Name" data-url="@Request.Url.AbsoluteUri" data-productimage="@imageThumbnailUrl" data-skuid="@Model.SelectedSku.Id" />
                        </div>
                    </div>
                }
            }
        </div>
    </div>

    <!-- ---------- Slider Thumbs ---------- -->
    @if (Model.Images.Any())
    {
        <div class="sl-product-thumbs">
            <div class="sl-items-container sl-slider slider-thumbs" data-value="productThumbs">
                @foreach (var image in Model.Images)
                {

                    var imageUrl = Url.ImageUrl(image.ImageAssetID, "ProductCatalogue", "ProductDetail", @"/_images/placeholders/article.jpg");
                    var imageZoomUrl = Url.ImageUrl(image.ImageAssetID, "ProductCatalogue", "ProductDetailZoom", @"/_images/placeholders/article.jpg");
                    var imageThumbnailUrl = Url.ImageUrl(image.ImageAssetID, "ProductCatalogue", "ProductThumbnail", @"/_images/placeholders/article.jpg");

                    <div class="sl-slide sl-item">
                        <div class="sl-item-inner" data-value="productThumb">
                            <img id="zoom@(image.ImageAssetID)" class="sl-item-image" src="@imageThumbnailUrl" data-productcode="@Model.SelectedSku.Code" data-productname="@Model.SelectedSku.Name" data-url="@Request.Url.AbsoluteUri" data-productimage="@imageThumbnailUrl" data-skuid="@Model.SelectedSku.Id" />
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <!-- ---------- Shop the Look (Desktop) ---------- -->
    @if (Model.RelatedProducts.Any())
    {
        <div class="sl-product-items sl-desktop">
            <h3 class="sl-heading">Style with</h3>
            <div class="sl-items-container sl-slider slider-items">
                @{ Html.RenderPartial("_ProductList", Model.RelatedProducts); }
            </div>
        </div>
    }
</div>

<!-- ---------- Right Side (Details) ---------- -->
<div class="sl-container sl-split-45">

    <!-- ---------- Intro ---------- -->
    @if (Model.Attributes.GetValueOrNull("Product Group") == "Paint")
    {
        <h1 class="sl-heading" data-value="productTitle">
            @(Model.Attributes.GetValueOrNull("Design Code") ?? Model.SelectedSku.Code)
        </h1>
    }
    else
    {
        <h1 class="sl-heading" data-value="productTitle">
            @Model.Product.Name
        </h1>

    }
    <!-- ---------- Wishlist / Change to fa-heart when selected ---------- -->
    <div class="sl-product-icons">
        <div class="sl-wishlist sl-icon fa-heart-o"></div>
        <div class="sl-trigger-share sl-icon sl-trigger-modal fa-share-alt"></div>
    </div>
    <h3 class="sl-heading" data-value="productCategory">
        @Model.Attributes.GetValueOrNull("Product Group")
    </h3>
    @if (Model.Attributes.GetValueOrNull("Brand") == "Morris &amp; Co.")
    {
        <h4 class="sl-heading sl-wide-2" data-value="productBrand">
            By Morris &amp; Co.
        </h4>
    }
    else
    {
        <h4 class="sl-heading sl-wide-2" data-value="productBrand">
            By @Model.Attributes.GetValueOrNull("Brand")
        </h4>
    }
    <h4 class="sl-heading sl-wide-2" data-value="productSKU">
        @Html.Raw(Model.Attributes.GetValueOrNull("Design Code") ?? Model.SelectedSku.Code)
    </h4>

    <p class="sl-copy" data-value="productDesc">
        @Html.Raw(Model.SelectedSku.ShortDescription).ToString().Trim()
    </p>

    @if (!string.IsNullOrEmpty(Model.Attributes.GetValueOrNull("Other Info")))
    {
        <p class="sl-copy">
            @(Model.Attributes.GetValueOrNull("Other Info"))
        </p>
    }

    <!-- ---------- Other Colours ---------- -->
    @if (Model.Skus.Any() && Model.Category.Name != "Bedding")
    {
        <div class="sl-items-container sl-small-pad" data-value="otherColours">
            @foreach (var item in Model.Skus.OrderBy(z => z.Sku.Order).Select((model, index) => new { index, model }))
            {
                if (item.model.Sku.IsOptionProduct == "N" || item.model.Sku.IsOptionProduct == null)
                {
                    var defaultItemImage = item.model.Images.OrderBy(x => x.Order).FirstOrDefault();
                    var defaultItemImageUrl = defaultItemImage != null ? @Url.ImageUrl(defaultItemImage.ImageAssetID, "ProductCatalogue", "ProductThumbnail") : @"/_images/placeholders/thumbnail.jpg";

                    <div class="sl-item sl-wide-10 sl-small-pad">
                        <a class="sl-item-inner @if (Model.SelectedSku.Id == item.model.Sku.Id) {<text>sl-active</text>}" href="?code=@item.model.Sku.Code">
                            <img src="@defaultItemImageUrl" alt="@item.model.Sku.Name" class="sl-item-image" data-productcode="@item.model.Sku.Code" data-productname="@item.model.Sku.Name" data-skuid="@item.model.Sku.Id" @if (defaultImage != null) { <text> data-imageassetid="@defaultImage.ImageAssetID" </text>  } data-productimage="@defaultItemImageUrl" data-url="@Request.Url.AbsolutePath?code=@item.model.Sku.Code" @if (isB2B) { <text> data-isb2b="true" </text>  }>
                        </a>
                    </div>
                }
            }
        </div>
        if (Model.Skus.Count > 10)
        {
            <p class="sl-copy">
                <a href="#" class="toggleColours fa-angle-down fa-before">Show more avaliable colours.</a>
            </p>
        }
    }


    @if (Model.Attributes.GetValueOrNull("Product Group") == "Paint")
    {
        <a href="#" id="PaintCalculatorLink">
            <text class="sl-text fa-calculator fa-before" style="float: right; margin: 10px;">Calculator</text>
        </a>
    }

    <!-- ---------- ALT / PPSQM Price ---------- -->
    @if (isSampleable && currencyRegion == "1" && !isContract)
    {
        if (Model.SelectedSku.UnitOfMeasurement.ToUpper() == "MT")
        {
            <p class="sl-copy" data-value="productRRPSQM">
                <text class="sl-text">SSP &pound;</text>
                <text class="sl-text sl-calc-total-panel"></text>
                <text class="sl-text">M<span>2</span></text>

                <a href="#" id="WallpaperCalculatorLink">
                    <text class="sl-text right fa-calculator fa-before">Calculator</text>
                </a>
            </p>
        }
        else if (Model.SelectedSku.UnitOfMeasurement.ToUpper() == "PL" || Model.SelectedSku.UnitOfMeasurement.ToUpper() == "R")
        {
            <p class="sl-copy" data-value="productRRPSQM">
                <text class="sl-text">SSP &pound;</text>
                <text class="sl-text sl-calc-total"></text>
                <text class="sl-text">M<span>2</span></text>

                <a href="#" id="WallpaperCalculatorLink">
                    <text class="sl-text right fa-calculator fa-before">Calculator</text>
                </a>
            </p>
        }
        else if (Model.Attributes.GetValueOrNull("Product Group") == "Fabric")
        {
            <p class="sl-copy" data-value="productRRPSQM">
                <text class="sl-text">SSP &pound;</text>
                <text class="sl-text sl-calc-total"></text>
                <text class="sl-text">M<span>2</span></text>
            </p>
        }
    }

    <!-- ---------- Product Options | PAINT ---------- -->
    @if (Model.Attributes.GetValueOrNull("Product Group") == "Paint")
    {
        { Html.RenderPartial("_PaintOptions"); }
    }
    <!-- ---------- Product Options | Bedding ---------- -->
    @if (Model.Attributes.GetValueOrNull("Product Group") == "Bedding" || Model.Attributes.GetValueOrNull("Product Group") == "Bathroom" || Model.Attributes.GetValueOrNull("Product Group") == "Rugs" || Model.Attributes.GetValueOrNull("Product Group") == "Furniture")
    {
        { Html.RenderPartial("_MultiOptions"); }
    }
    else if (Model.Attributes.GetValueOrNull("Product Group") != "Paint")
    {
    <!-- ---------- Product Options | FABRIC, WALLPAPER, TRIMMINGS, CUSHIONS ---------- -->
        <div class="sl-options-container sl-small-pad">
            <div class="sl-option sl-wide-1 sl-small-pad product-option" data-product-option-price="@Model.Price.PriceInc.AsDecimal(0)" data-product-option-skuid="@Model.SelectedSku.Id">
                <div class="sl-option-inner">
                    @*@if (!string.IsNullOrEmpty(Model.SelectedSku.IsOptionProduct) && currencyRegion == "1" && !isB2B)
                        {
                          <div class="sl-field-group">
                            <div class="sl-field">
                              <text class="sl-text fa fa-check"></text>
                            </div>
                          </div>
                        }*@
                    <div class="sl-field-group">
                        <div class="sl-field">
                            <text class="sl-text">
                                @if (Model.SelectedSku.UnitOfMeasurement.ToUpper() == "EA")
                                {
                                    <text><span class="peritem">Per Item</span></text>
                                }
                                else if (Model.SelectedSku.UnitOfMeasurement.ToUpper() == "PL" || Model.SelectedSku.UnitOfMeasurement.ToUpper() == "MT")
                                {
                                    <text>Per Panel</text>
                                }
                                else if (Model.SelectedSku.UnitOfMeasurement.ToUpper() == "M")
                                {
                                    if (isB2B)
                                    {
                                        <text></text>
                                    }
                                    else
                                    {
                                        <text>Per Metre</text>
                                    }
                                }
                                else if (Model.SelectedSku.UnitOfMeasurement.ToUpper() == "Y")
                                {
                                    <text>Per Yard</text>
                                }
                                else if (Model.SelectedSku.UnitOfMeasurement.ToUpper() == "R")
                                {
                                    <text>Per Roll</text>
                                }
                            </text>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.SelectedSku.IsOptionProduct) && currencyRegion == "1" && !isB2B)
                    {
                        <div class="spinner sl-spinner-container sl-right">
                            <input type="text" class="js-spinner-split" name="quantity" id="spinnerSplit_@Model.SelectedSku.Code" value="1" data-max-value="100" data-min-value="1" />
                        </div>
                    }
                    <div class="sl-field-group sl-right with-spin">
                        @if (isB2B)
                        {
                            <div class="sl-field" data-productcode="@Model.SelectedSku.Code" data-b2bfetch="true">
                                <text class="sl-text accessMessage" data-value="productPrice">Access Denied</text>
                            </div>
                        }
                        @if (isB2B && !isContract)
                        {
                            <div class="sl-field" data-productcode="@Model.SelectedSku.Code" data-value="productStock" data-b2bfetch="true">
                                <text class="sl-text stock">
                                    <div class="sk-fading-circle">
                                        <div class="sk-circle1 sk-circle"></div>
                                        <div class="sk-circle2 sk-circle"></div>
                                        <div class="sk-circle3 sk-circle"></div>
                                        <div class="sk-circle4 sk-circle"></div>
                                        <div class="sk-circle5 sk-circle"></div>
                                        <div class="sk-circle6 sk-circle"></div>
                                        <div class="sk-circle7 sk-circle"></div>
                                        <div class="sk-circle8 sk-circle"></div>
                                        <div class="sk-circle9 sk-circle"></div>
                                        <div class="sk-circle10 sk-circle"></div>
                                        <div class="sk-circle11 sk-circle"></div>
                                        <div class="sk-circle12 sk-circle"></div>
                                    </div>
                                </text>
                            </div>
                        }
                        @if (currencyRegion == "1" && !isContract && Model.PriceWas.PriceInc.AsDecimal(0).ToString("#0.00") != "0.00")
                        {
                            <div class="sl-field">
                                <text class="sl-text"><span>SSP</span></text>
                                <!-- Add disabled class if sale active -->
                                <text class="sl-text" data-value="productRRP">&pound;@Model.PriceWas.PriceInc.AsDecimal(0).ToString("#0.00")</text>
                                <!-- If sale active then... -->
                                <!-- <text class="sl-text" data-value="productSale">&pound;33.00</text> -->
                            </div>
                        }
                        @if (isB2B && !isContract)
                        {
                            <div class="sl-field" data-productcode="@Model.SelectedSku.Code" data-b2bfetch="true" data-value="productPrice">
                                <text class="sl-text price">
                                    <div class="sk-fading-circle">
                                        <div class="sk-circle1 sk-circle"></div>
                                        <div class="sk-circle2 sk-circle"></div>
                                        <div class="sk-circle3 sk-circle"></div>
                                        <div class="sk-circle4 sk-circle"></div>
                                        <div class="sk-circle5 sk-circle"></div>
                                        <div class="sk-circle6 sk-circle"></div>
                                        <div class="sk-circle7 sk-circle"></div>
                                        <div class="sk-circle8 sk-circle"></div>
                                        <div class="sk-circle9 sk-circle"></div>
                                        <div class="sk-circle10 sk-circle"></div>
                                        <div class="sk-circle11 sk-circle"></div>
                                        <div class="sk-circle12 sk-circle"></div>
                                    </div>
                                </text>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    <!-- If more than 5 options show this toggle. -->
    <!-- <a href="#" class="sl-button wide">
      <div class="sl-inner sl-level-2">
      <text class="fa-before fa-angle-down">Show all Options</text>
    </div>
    </a> -->

    <div class="sl-product-buttons" data-productcode="@Model.SelectedSku.Code" data-productname="@Model.SelectedSku.Name" data-skuid="@Model.SelectedSku.Id" @if (defaultImage != null) { <text> data-imageassetid="@defaultImage.ImageAssetID" </text>  } data-productimage="@defaultImageUrl" data-url="@Request.Url.AbsoluteUri">
        @if (!string.IsNullOrEmpty(Model.SelectedSku.IsOptionProduct) && currencyRegion == "1" && !isB2B && Model.Attributes.GetValueOrNull("Product Group") == "Cushions")
        {
            <a href="@Url.Action("BasketCommand", "Basket", new {area = "ShopPurchase", command = "add", redirectUrl = Request.Url.AbsolutePath, skuId = Model.SelectedSku.Id, quantity = 1})" class="sl-button addToBasket">
                <div class="sl-inner sl-level-3">
                    <div class="sl-arrow"></div>
                    <text>Total: &pound;</text>
                    <text id="totalProductOptionsCost">@Model.Price.PriceInc.AsDecimal(0).ToString("#0.00")</text>
                </div>
            </a>
            <a href="@Url.Action("BasketCommand", "Basket", new {area = "ShopPurchase", command = "add", redirectUrl = Request.Url.AbsolutePath, skuId = Model.SelectedSku.Id, quantity = 1})" class="sl-button addToBasket">
                <div class="sl-inner sl-level-1">
                    <text>Add</text>
                    <text class="product-totals-count"></text>
                    <text>to Basket</text>
                </div>
            </a>
        }
        @if (!isB2B && Model.Attributes.GetValueOrNull("Product Group") != "Cushions")
        {
            if (Model.Attributes.GetValueOrNull("Product Group") == "Paint" && currencyRegion == "1")
            {
                <div class="paint-sample-message">0.125ml sample pot in Emulsion available on all paints</div>

                <a href="#" class="sl-button sl-trigger-paintchart sl-trigger-modal">
                    <div class="sl-inner sl-level-2">
                        <text>Order Paint Chart</text>
                    </div>
                </a>
            }

            if (isSampleable && currencyRegion == "1")
            {
                <a href="@Url.Action("BasketCommand", "Basket", new { area = "ShopPurchase", command = "add", redirectUrl = Request.Url.AbsolutePath, skuId = Model.SkuId, sample = "True" })" class="sl-button addToBasket">
                    <div class="sl-inner sl-level-1">
                        <text>Order Sample</text>
                    </div>
                </a>
            }
            
            if (currencyRegion == "1" && (Model.Attributes.GetValueOrNull("Product Group") == "Bedding" || Model.Attributes.GetValueOrNull("Product Group") == "Bathroom" || Model.Attributes.GetValueOrNull("Product Group") == "Rugs")
                && !string.IsNullOrEmpty(@Model.SelectedSku.ThirdPartyUrl))
            {
                if (!String.IsNullOrEmpty(@Model.SelectedSku.ThirdPartyHost))
                {
                    <a href="@Model.SelectedSku.ThirdPartyUrl" target="_blank" class="sl-button">
                        <div class="sl-inner sl-level-1">
                            <text>@Model.SelectedSku.ThirdPartyHost</text>
                        </div>
                    </a>
                }
                else
                {
                    @*<div class="sl-button">
                            <div class="sl-inner sl-level-1">
                                <text>@Model.SelectedSku.ThirdPartyUrl</text>
                            </div>
                        </div>*@

                    <a href="#" class="sl-button">
                        <div class="sl-inner sl-level-1">
                            <text>@Model.SelectedSku.ThirdPartyUrl</text>
                        </div>
                    </a>
                }
            }
            else if (Model.Attributes.GetValueOrNull("Product Group") == "Furniture")
            {
                <a href="/contact-us" class="sl-button">
                    <div class="sl-inner sl-level-1">
                        <text>Contact Us</text>
                    </div>
                </a>
            }
            else
            {
                <a href="#" class="sl-button toggleStockist">
                    <div class="sl-inner sl-level-2">
                        <span>Find a Retailer</span>
                    </div>
                </a>
                <a href="/stockists" class="sl-button ipadStockists">
                    <div class="sl-inner sl-level-2"><span>Find a Retailer</span></div>
                </a>
            }
        }
        
        @if (isB2B && !isContract)
        {
            if (isSampleable)
            {
                <a href="@Url.Action("BasketCommand", "Basket", new { area = "ShopPurchase", command = "add", redirectUrl = Request.Url.AbsolutePath, skuId = Model.SkuId, sample = "True" })" class="sl-button addToBasket b2baddsampletobasket">
                    <div class="sl-inner sl-level-1">
                        <text>Order Sample</text>
                    </div>
                </a>
            }
            <a href="@Url.Action("BasketCommand", "Basket", new { area = "ShopPurchase", command = "add", redirectUrl = Request.Url.AbsolutePath, skuId = Model.SkuId })" class="sl-button b2baddtobasket">
                <div class="sl-inner sl-level-1">
                    <text>Add to Basket</text>
                </div>
            </a>
        }
    </div>
    @if (isSampleable && currencyRegion == "1" && !isB2B)
    {
        <p class="sl-copy">
            Sample Delivery is charged at &pound;3.00, up to and including the first 4 samples per order. For additional samples, delivery is charged at &pound;0.75 each.
        </p>
    }
    @if (isB2B && !isContract)
    {
        <p class="sl-copy">
            <!-- Lorem ipsum dolor sit amet, consectetur adipisicing elit. Accusamus odio, facilis voluptas possimus quo officiis laboriosam. -->
        </p>
    }
    @if (!string.IsNullOrEmpty(Model.SelectedSku.IsOptionProduct) && currencyRegion == "1" && !isB2B && Model.Attributes.GetValueOrNull("Product Group") == "Cushions")
    {
        <p class="sl-copy">
            Delivery is calculated at checkout. All prices include VAT. We currently only ship consumer orders to mainland UK.
        </p>
    }
    @if (Model.Attributes.GetValueOrNull("Product Group") == "Paint" && currencyRegion == "1" && !isB2B)
    {
        <p class="sl-copy">
            Please be advised our paint stockists are able to offer expert advice on finishes, colours and application and order paint on a next day delivery service. If you require to take the paint away with you on the same day, we recommend you contact the retailer in advance.
        </p>
    }
    <!-- ---------- Collection Brochure ---------- -->
    @if (!string.IsNullOrEmpty(Model.Category.BrochureUri))
    {
        <a href="@Html.Raw(Model.Category.BrochureUri)" target="_blank" class="sl-button sl-wide-1">
            <div class="sl-inner sl-level-2">
                <text>View the Brochure</text>
            </div>
        </a>
    }

    <!-- ---------- Tab Section For Additional Details ---------- -->
    @if (Model.Attributes.GetValueOrNull("Product Group") != "Paint")
    {
        Html.RenderPartial("_AdditionalDetails", Model);
    }



    <!-- ---------- Shop the Look (Mobile) ---------- -->
    @if (Model.RelatedProducts.Any())
    {
        <div class="sl-product-items sl-mobile">
            <h3 class="sl-heading sl-center">Style with</h3>
            <div class="sl-items-container sl-slider slider-items">
                @{ Html.RenderPartial("_ProductList", Model.RelatedProducts); }
            </div>
        </div>
    }
</div>

<div class="sl-container sl-wide-1">
    <!-- ---------- You May Also Like - Products ---------- -->
    @if (Model.RelatedProducts.Any() && 1 == 3)
    {
        <div class="sl-product-items">
            <h3 class="sl-heading sl-center">You May Also Like</h3>
            <div class="sl-items-container sl-slider slider-youMayAlsoLike">
                @{ Html.RenderPartial("_YouMayAlsoLike", Model.RelatedProducts); }
            </div>
        </div>
    }

    <!-- ---------- Design Notes ---------- -->
    @if (!string.IsNullOrEmpty(Model.Category.DesignerNotes))
    {
        <div class="sl-content-section">
            <div class="sl-content-inner">
                <!-- <h3 class="sl-heading sl-center">Design Notes</h3> -->
                @Html.Raw(Model.Category.DesignerNotes)
            </div>
        </div>
    }

    <!-- ---------- Design Process ---------- -->
    @if (!string.IsNullOrEmpty(Model.Category.DesignProcess))
    {
        <div class="sl-content-section">
            <div class="sl-content-inner">
                <!--<h3 class="sl-heading sl-center">Design Process</h3>-->
                @Html.Raw(Model.Category.DesignProcess)
            </div>
        </div>
    }


    <div class="prodWideSection">
        @if (Model.Attributes.GetValueOrNull("Brand") == "Morris &amp; Co.")
        {
            <div class="wideImagePromo" style="background-image: url(https://69445235844b78bbd4c8-40765e7850b487e7db6d0b1ca2adcee0.ssl.cf3.rackcdn.com/_assets/images/NSL/Heroes/Morris-brand-pdp-cta.jpg);">

                <!--<div class="wideImagePromo" style="background-image: url(/_images/brands/wg/images/brand-features/MorrisFeature.png);">-->
                <div class="promoCaption">
                    <div class="promoCaptionInner">
                        <div class="promoBrandLogo Morris">
                            <img src="/_images/brands/wg/logos/Morris-C.png" alt="">
                        </div>
                        <p>William Morris believed that everybody has the right to a beautiful house. As custodians of the incredible Morris & Co. archive, we continue to fulfil his legacy by curating beautifully crafted products inspired by his original designs. </p>
                        <a href="/brands/morris">
                            <button class="primaryButton">Discover Morris &amp; Co.</button>
                        </a>
                    </div>
                </div>
            </div>
        }
        else
        {
            if (Model.Attributes.GetValueOrNull("Brand") != "FR One" && Model.Attributes.GetValueOrNull("Brand") != "Zoffany Inc")
            {
                <div class="wideImagePromo" style="background-image: url(https://69445235844b78bbd4c8-40765e7850b487e7db6d0b1ca2adcee0.ssl.cf3.rackcdn.com/_assets/images/NSL/Heroes/@(Model.Attributes.GetValueOrNull("Brand"))-brand-pdp-cta.jpg);">
                    <div class="promoCaption">
                        <div class="promoCaptionInner">
                            <div class="promoBrandLogo @(Model.Attributes.GetValueOrNull("Brand"))">
                                <img src="/_images/brands/wg/logos/@(Model.Attributes.GetValueOrNull("Brand"))-C.png" alt="">
                            </div>
                            @if (Model.Attributes.GetValueOrNull("Brand") == "Harlequin")
                            {
                                <p>If you love high fashion, Harlequin will probably steal your heart. Expect to be wowed by fusions of delicious colours, innovative textures and catwalk-inspired design. </p>
                            }
                            @if (Model.Attributes.GetValueOrNull("Brand") == "Zoffany")
                            {
                                <p>If your world is driven by a desire to fuse luxury with art, you'll undoubtedly find a kindred spirit in Zoffany.</p>
                            }
                            @if (Model.Attributes.GetValueOrNull("Brand") == "Sanderson")
                            {
                                <p>Wellies by the door, cosy log fires and hearty suppers around a big kitchen table. This is Sanderson country. </p>
                            }
                            @if (Model.Attributes.GetValueOrNull("Brand") == "Scion")
                            {
                                <p>For homes that surprise and delight, think Scion. This is an upbeat brand for everyone, with zesty colours, clean Scandi-inspired designs and fresh ideas for modern living. </p>
                            }
                            @if (Model.Attributes.GetValueOrNull("Brand") == "Anthology")
                            {
                                <p>If you crave contemporary spaces, sleek finishes, moody metropolitan colours and uncompromising innovation, we've already got something in common.</p>
                            }
                            <a href="/brands/@(Model.Attributes.GetValueOrNull("Brand"))" class="sl-button">
                                <div class="sl-inner sl-level-2">
                                    <text>Discover @(Model.Attributes.GetValueOrNull("Brand"))</text>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- ---------- Recently Viewed ---------- -->
    <div class="sl-product-items">
        <h3 class="sl-heading sl-center">Recently Viewed</h3>
        <div class="sl-items-container sl-slider slider-recents">
            @Html.Action("RecentlyViewedProducts", "WgShop", new { area = "CustomShops" })
        </div>
    </div>
</div>

<script src="/_js/brands/wg/sl-slick.min.js" type="text/javascript"></script>
<script src="/_js/brands/wg/jquery.zoom.js" type="text/javascript"></script>

<!-- ------Script for PaintCard Request ------- -->
<script src="/_js/shared/paintcard-addresslookup.js" type="text/javascript"></script>
<script type="text/javascript">

    $(document).ready(function () {
        // Hover Zoom
        $('.sl-zoom').zoom();
    });

    if (typeof dataLayer === 'undefined') {
        console.error('GTM _ProductDetail: dataLayer not defined');
    }
    if (typeof dataLayer !== 'undefined') {
        $(document)
            .ready(function () {
                dataLayer.push({
                    'event': 'ga-ee',
                    'eventAction': 'productDetail',
                    'ecommerce': {
                        'currencyCode': '@Model.RegionInfo.ISOCurrencySymbol',
                        'detail': {
                            'products': [
                            {
                                'name': '@Model.Product.Name',
                                'id': '@(string.IsNullOrEmpty(Model.Name) ? Model.SelectedSku.Code : Model.Name)',
                                'price': '0.00',
                                'brand': '@Html.Raw(brand.Replace("&amp;", "&"))',
                                'category': '@ProductGroup',
                                'dimension2': '@DescriptiveColour',
                                'dimension3': '@Model.Category.Name',
                                'dimension4': '@PatternMatchDescription',
                                'dimension5': '@((Model.SelectedSku.Width ?? 0).ToString("0.0"))'
                            }
                            ]
                        }
                    }
                });
                $('a.addToBasket')
                    .on('click',
                        function () {
                            dataLayer.push({
                                'event': 'ga-ee',
                                'eventAction': 'addToBasket',
                                'ecommerce': {
                                    'currencyCode': '@Model.RegionInfo.ISOCurrencySymbol',
                                    'add': {
                                        'products': [
                                        {
                                            'name': '@Model.Product.Name',
                                            'id': '@(string.IsNullOrEmpty(Model.Name) ? Model.SelectedSku.Code : Model.Name)',
                                            'price': '@(isSampleable ? "0.00" : currentPrice)',
                                            'brand': '@Html.Raw(brand)',
                                            'category': '@ProductGroup',
                                            'variant': '@(isSampleable ? "Sample" : "Product")',
                                            'quantity': 1,
                                            'dimension2': '@DescriptiveColour',
                                            'dimension3': '@Model.Category.Name',
                                            'dimension4': '@PatternMatchDescription',
                                            'dimension5': '@((Model.SelectedSku.Width ?? 0).ToString("0.0"))'
                                        }]
                                    }
                                }
                            });
                        });
            });
    }
</script>